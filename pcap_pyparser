#!/usr/bin/python

import sys
import dpkt
import socket
import argparse


version = '0.0.3'

# Description of this parameter
def arg_parser():
    parser = argparse.ArgumentParser(
        description='''This is a python pcap parser. Only pcap''',
        epilog='''(c) PASIT 2017 by Vitaly and Igor''')

    # Parameter for input file
    parser.add_argument('-i', '--input_file', type=str,
                        # Description of this parameter
                        help='Input pcap file for parsing',
                        # Name of this parameter
                        metavar='<input file>')
    # Parameter for output file
    parser.add_argument('-o', '--output_file', type=str,
                        # Description of this parameter
                        help='Output file',
                        # Name of this parameter
                        metavar='<output_file>')
    # Parameter for filter
    parser.add_argument('-f', '--filter', type=str,
                        # Description of this parameter
                        help='Filter',
                        # Name of this parameter
                        metavar='<filter>')
    # Parameter for version
    parser.add_argument('-v', '--version', action='version',
                        help='number of version',
                        version='{0}'.format(version))

    parser.add_argument('-ip',
                               help='ip address',
                               metavar='<ip address>')
    parser.add_argument('-dst_ip',
                               help='destination ip address',
                               metavar='<ip address>')
    parser.add_argument('-src_ip',
                               help='source ip address',
                               metavar='<ip address>')
    parser.add_argument('-mac',
                               help='mac address',
                               metavar='<mac address>')
    parser.add_argument('-dst_mac',
                               help='destination mac address',
                               metavar='<mac address>')
    parser.add_argument('-src_mac',
                               help='source mac address',
                               metavar='<mac address>')
    parser.add_argument('-port',
                               help='port',
                               metavar='<port>')
    parser.add_argument('-dst_port',
                               help='destination port',
                               metavar='<port>')
    parser.add_argument('-src_port',
                               help='source port',
                               metavar='<port>')
    parser.add_argument('-type',
                               help='type of packet: TCP or UDP',
                               metavar='<type>')
    parser.add_argument('-s', '--session',
                        help='split pcap file to tcp and udp session',
                        default=False,
                        action='store_true')
    parser.add_argument('--show',
                        help='show the output of the parser in console',
                        default=False,
                        action='store_true')


    return parser


#def pcap_parser(input_file, output_file, filter):
def pcap_parser(namespace):
    # Open input file
    #file = open(input_file)
    file = open(namespace.input_file)
    # Use dpkt parser for read pcap file
    pcap = dpkt.pcap.Reader(file)

    packet = {}
    packet_count = 0
    folder = ''
    number_of_packet = 0
    sessions_full ={}

    number_of_packet = 0
    for ts, buf in pcap:
        try:
            right_packet = False
            # Parse ethernet level
            eth = dpkt.ethernet.Ethernet(buf)
            ip = eth.data

            # Get destination and source mac address
            src_mac = get_mac(eth.src)
            dst_mac = get_mac(eth.dst)

            # Get destination and source ip address
            if len(ip.dst) == 4:
                # If destination ip ver. 4
                dst_ip = socket.inet_ntoa(ip.dst)
            else:
                # If destination ip ver. 6
                dst_ip = socket.inet_ntop(socket.AF_INET6, ip.dst)

            if len(ip.src) == 4:
                # If source ip ver. 4
                src_ip = socket.inet_ntoa(ip.src)
            else:
                # If source ip ver. 6
                src_ip = socket.inet_ntop(socket.AF_INET6, ip.src)

            # TCP or UDP, vot v chem vopros!
            if ip.p == dpkt.ip.IP_PROTO_UDP:
                type_packet = 'udp'
            elif ip.p == dpkt.ip.IP_PROTO_TCP:
                type_packet = 'tcp'

            # Get destination and source port
            dst_port = ip.data.dport
            src_port = ip.data.sport

            # Get data from payload of packet
            data = ip.data.data

            # If
            #test = set(namespace.mac, namespace.port, namespace.ip, namespace.filter, namespace.dst_ip, namespace.src_ip, namespace.dst_port, namespace.src_port, namespace.dst_mac, namespace.src_mac, namespace.type, namespace.filter)
            #print(test)
            #if not test:
            #    print('ololo')
            if not any((namespace.mac, namespace.port, namespace.ip, namespace.filter, namespace.dst_ip, namespace.src_ip, namespace.dst_port, namespace.src_port, namespace.dst_mac, namespace.src_mac, namespace.type, namespace.filter)):
                right_packet = True
                print('no filter')
            elif namespace.mac and (namespace.mac in(dst_mac, src_mac)):
                right_packet = True
            elif namespace.ip and (namespace.ip in (dst_ip, src_ip)):
                right_packet = True
            elif namespace.port and (namespace.port in (dst_port, src_port)):
                right_packet = True
            elif namespace.src_mac and (namespace.src_mac == src_mac):
                right_packet = True
            elif namespace.dst_mac and (namespace.dst_mac == dst_mac):
                right_packet = True
            elif namespace.src_ip and (namespace.src_ip == src_ip):
                right_packet = True
            elif namespace.dst_ip and (namespace.dst_ip == dst_ip):
                right_packet = True
            elif namespace.src_port and (namespace.src_port == src_port):
                right_packet = True
            elif namespace.dst_port and (namespace.dst_port == dst_port):
                right_packet = True
            elif namespace.type and (namespace.type == type_packet):
                right_packet = True
            elif namespace.filter and (namespace.filter in data):
                right_packet = True

            if right_packet:
                packet = {'index': number_of_packet,
                          'source': {'src_mac': src_mac, 'src_ip': src_ip, 'src_port': src_port},
                          'destination': {'dst_mac': dst_mac, 'dst_ip': dst_ip, 'dst_port': dst_port},
                          'type': type_packet,
                          'data': data}
                number_of_packet = number_of_packet + 1

            if namespace.show:
                print(packet)

            if namespace.session:
                # create sessions on a single packet
                out_sessions_parser = _sessions_parser(packet)
                list_files = []
                if (out_sessions_parser.keys()[0] in sessions_full.keys()) == False:
                    sessions_full[out_sessions_parser.keys()[0]] = []
                sessions_full[out_sessions_parser.keys()[0]].append(out_sessions_parser.values()[0][0])

                # bound of iterated packets
                if packet_count > 10000:
                    keys_sessions = sessions_full.keys()
                    for i in range(len(keys_sessions)):
                        # if session's file doesn't exist - create it
                        if (keys_sessions[i] in list_files) == None:
                            fsessions = open(folder + keys_sessions[i], 'w')
                            sessions_data = sessions_full[keys_sessions[i]]
                            for j in range(len(sessions_data)):
                                fsessions.write(sessions_data[j])
                            fsessions.close()
                            list_files.append(keys_sessions[i])
                        # if exist - append
                        else:
                            print
                            'yes'
                            fsessions = open(folder + keys_sessions[i], 'a')
                            sessions_data = sessions_full[keys_sessions[i]]
                            for j in range(len(sessions_data)):
                                fsessions.write(sessions_data[j])
                            fsessions.close()
                    # clear dictionary
                    sessions_full.clear()
                    sessions_full = {}
                    packet_count = 0
                number_of_packet = number_of_packet + 1
                packet_count += 1




        except AttributeError:
            #print('Error!')
            number_of_packet = number_of_packet + 1
            continue


    # if not across bound of packets, write sessions
    keys_sessions = sessions_full.keys()
    for i in range(len(keys_sessions)):
        # if session's file doesn't exist - create it
        if (keys_sessions[i] in list_files) == None:
            fsessions = open(folder + keys_sessions[i], 'w')
            sessions_data = sessions_full[keys_sessions[i]]
            for j in range(len(sessions_data)):
                fsessions.write(sessions_data[j])
            fsessions.close()
            list_files.append(keys_sessions[i])
        # if exist - append
        else:
            fsessions = open(folder + keys_sessions[i], 'a')
            sessions_data = sessions_full[keys_sessions[i]]
            for j in range(len(sessions_data)):
                fsessions.write(sessions_data[j])
            fsessions.close()
            # print(sessions_parser(packet))

def get_mac(raw_mac):
    # This function for convert mac address to humanreadable
    # raw_mac - .src or .dst methods of Ethernet layer
    mac = ''
    for i in range(6):
        tmp = hex((ord(raw_mac[i])))
        if len(tmp[2:]) < 2:
            mac = mac + '0' + tmp[2:] + ":"
        else:
            mac = mac + tmp[2:] + ":"
    return mac[:-1]


def _sessions_parser(packet):
    sessions = {}
    packet_cout = packet['index']
    for i in range(packet_cout):
        out_str = ''
        network_path = packet['source']['src_ip'] + '.' + str(packet['source']['src_port']) + '-' + \
                       packet['destination']['dst_ip'] + '.' + str(packet['destination']['dst_port'])
        if (network_path in sessions.keys()) == False:
            sessions[network_path] = []
            try:
                data_str = packet['data']
            except AttributeError:
                continue
                # for j in range(0,len(data_str),2):
                #		out_str = out_str + chr(int(data_str[j:j+2],16))
            sessions[network_path].append(data_str)

    # print("Extract complite")
    return sessions


def filter_function(packet):
    pass


def sessions_parser(packet):
    sessions = {}
    packet_cout = packet['index']
    for i in range(packet_cout):
        network_path = packet['source']['src_ip'] +'.'+packet['source']['src_port']+'-'+packet['destination']['dst_ip']+'.'+packet['destination']['dst_port']
        if (network_path in sessions.keys()) == False:
            sessions[network_path] = []
            try:
                data_str = packet['data']
            except AttributeError:
                continue
                #for j in range(0,len(data_str),2):
                #		out_str = out_str + chr(int(data_str[j:j+2],16))
            sessions[network_path].append(data_str)
    print("Extract complite")
    return sessions


if __name__ == "__main__":
    parser = arg_parser()
    namespace = parser.parse_args(sys.argv[1:])
    print(namespace)
    if not namespace.input_file:
        print('Select input file!')
    #elif not namespace.filter == '':
    #    pass
    else:
        #pcap_parser(namespace.input_file, namespace.output_file, namespace.filter)
        pcap_parser(namespace)
